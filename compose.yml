version: '3'

services:
  teedy-server:
    # Teedy Application
    image: sismics/docs:v1.11
    restart: unless-stopped
    ports:
      # Map internal port to host
      - 8081:8080
    environment:
      # Base url to be used
      DOCS_BASE_URL: "https://docs.example.com"
      # Set the admin email
      DOCS_ADMIN_EMAIL_INIT: "admin@example.com"
      # Set the admin password (in this example: "superSecure")
      DOCS_ADMIN_PASSWORD_INIT: "$$2a$$05$$PcMNUbJvsk7QHFSfEIDaIOjk1VI9/E7IPjTKx.jkjPxkx2EOKSoPS"
      # Setup the database connection. "teedy-db" is the hostname
      # and "teedy" is the name of the database the application
      # will connect to.
      DATABASE_URL: "jdbc:postgresql://teedy-db:5432/teedy"
      DATABASE_USER: "teedy_db_user"
      DATABASE_PASSWORD: "teedy_db_password"
      DATABASE_POOL_SIZE: "10"
    container_name: teedy-server
    volumes:
      - ./teedy/docs/data:/data
    networks:
      - docker-internal
      - internet
    depends_on:
      - teedy-db

  teedy-db:
    # DB for Teedy
    image: postgres:13.1-alpine
    restart: unless-stopped
    expose:
      - 5432
    environment:
      POSTGRES_USER: "teedy_db_user"
      POSTGRES_PASSWORD: "teedy_db_password"
      POSTGRES_DB: "teedy"
    container_name: teedy-db
    volumes:
      - ./teedy/docs/db:/var/lib/postgresql/data
    networks:
      - docker-internal

  php:
    # PHP service
    restart: always
    build:
      context: .
      dockerfile: ./web/php/Dockerfile
    container_name: php-fpm
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - php-fpm-sock:/var/run/php-fpm
      - meta_data:/tmp
    networks:
      - docker-internal
      - internet

  nginx:
    # NGINX service
    restart: always
    ports:
      - 8008:80
    build:
      context: .
      dockerfile: ./web/nginx/Dockerfile
    container_name: nginx
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - php-fpm-sock:/var/run/php-fpm
    depends_on:
      - php
    networks:
      - internet

  python3:
    # Python service
    restart: always
    build:
      context: .
      dockerfile: ./web/python/Dockerfile
    container_name: python3
    command: tail -f /dev/null
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - meta_data:/tmp
    networks:
      - docker-internal
      - internet

networks:
  # Network without internet access. The db does not need
  # access to the host network.
  docker-internal:
    driver: bridge
    internal: true
  internet:
    driver: bridge

volumes:
  meta_data:
  php-fpm-sock:

